<!--
This launch file runs the pose 2d estimator with simulated sensor output based
on a rosbag recorded during a drive test of the Armadillo Pichi robot.
-->

<launch>
	<!-- Armadillo Pichi parameters --> 
	<param name="robot_max_velocity" value="2.0"/>
	<param name="diff_steer_wheel_radius" value="0.159"/>
	<param name="diff_steer_wheel_ticks_per_rev" value="1285"/>
	<param name="diff_steer_wheel_distance" value="0.85"/>

	<param name="/use_sim_time" value="true"/> 

	<group ns="fmSensors">
		<!-- extract data from $GPGGA NMEA messages transmitted by the GPS -->
		<node pkg="gps_gpgga" name="nmea_to_gpgga" type="gps_gpgga_node" output="screen">
		    <param name="subscribe_topic_id" value="/fmData/gps_rx" />
			<param name="publish_topic_id" value="/fmInformation/gpgga_sim" />
		</node>

		<!-- append Transverse Mercator projection coordinates to NMEA $GPGGA message -->
		<node pkg="gpgga_to_tranmerc" name="gpgga_to_tranmerc" type="gpgga_to_tranmerc_node" output="screen">
			<param name="gpgga_sub" value="/fmInformation/gpgga_sim" />
			<param name="gpgga_tranmerc_pub" value="/fmInformation/gpgga_tranmerc_sim" />
			<param name="transverse_mercator_a" value="6378137.0" />
			<param name="transverse_mercator_f" value="0.0033528106647474805" /> 
			<param name="transverse_mercator_false_easting" value="500000.0" />
			<param name="transverse_mercator_scale_factor" value="0.9996" />
			<param name="transverse_mercator_origin_latitude" value="0.0" />
			<param name="transverse_mercator_central_meridian" value="9.0" />
			<param name="transverse_mercator_false_northing" value="0.0" />
		</node>
	</group>

	<group ns="fmProcessors">
		<!-- plot maps of pose, gnss and odometry data -->
		<node pkg="sdu_kjen_sandbox" name="robot_track_map" type="robot_track_map_node.py" output="screen" >
			<param name="pose_sub" value="/fmKnowledge/pose_sim" />
			<param name="gnss_sub" value="/fmInformation/gpgga_tranmerc_sim" />
			<param name="odom_sub" value="/fmKnowledge/encoder_odom_sim" />
			<param name="wptnav_status_sub" value="/fmData/wptnav_status_sim" />
			<param name="plot_pose_track" value="true" /> <!-- remember to use proper values for ekf_initial_guess_ at pose_2d_estimator for this plot -->
			<param name="plot_gnss_track" value="true" />
			<param name="plot_odometry_track" value="false" />
			<param name="plot_pose_yaw" value="false" />
			<param name="easting_offset" value="-588784.0" />
			<param name="northing_offset" value="-6137262.0" />
			<param name="trackpoint_threshold" value="0.1" /> <!-- [m] -->
			<param name="map_update_frequency" value="2.0" /> <!-- [Hz] -->
			<param name="map_title" value="Robot track" />
			<param name="map_window_size" value="10.0" /> <!-- [inches] -->
		</node>

		<!-- calculate odometry based on encoders and IMU yaw axis orientation -->
		<node pkg="differential_odometry" name="differential_odometry" type="differential_odometry_node" output="screen" >
			<param name="enc_left_sub" value="/fmInformation/enc_left_sim" />
			<param name="enc_right_sub" value="/fmInformation/enc_right_sim" />
			<param name="imu_sub" value="/fmInformation/imu" />
			<param name="odom_pub" value="/fmKnowledge/encoder_odom_sim" />
			<param name="encoder_output" value="absolute"></param>  
		    <!--<param name="yaw_angle_source" value="imu_orientation"></param> -->
			<param name="yaw_angle_source" value="imu_angular_velocity"></param>
			<param name="imu_angular_velocity_yaw_axis" value="y"></param>
			<param name="vehicle_frame" value="base_footprint"></param>      
			<param name="odom_estimate_frame" value="/odom_combined"></param>      
		</node>

		<!-- estimate robot 2d pose -->
		<node pkg="pose_2d_estimator" name="pose_estimator" type="pose_2d_estimator_node.py" output="screen" >
			<param name="odom_sub" value="/fmKnowledge/encoder_odom_sim" />
			<param name="imu_sub" value="/fmInformation/imu" />
			<param name="gga_sub" value="/fmInformation/gpgga_tranmerc_sim" />
			<param name="pose_pub" value="/fmKnowledge/pose_sim" />
			<param name="ekf_initial_guess_easting" value="588784.0" /> <!-- [m] if unsure set to 0.0 -->
			<param name="ekf_initial_guess_northing" value="6137262.0" /> <!-- [m] if unsure set to 0.0 -->
			<param name="ekf_initial_guess_yaw" value="0.0" /> <!-- [rad] if unsure set to 0.0 -->
			<param name="odometry_distance_variance" value="0.000001" /> <!-- [m/update] -->
			<param name="odometry_angular_variance" value="0.00035" /> <!-- [rad/update] -->
		</node>
	</group>

	<group ns="fmDecisionMakers">
		<node pkg="sdu_kjen_sandbox" name="mission_control" type="simple_mission.py">
    		<param name="deadman_topic" value="/fmSignals/deadman" />
			<param name="cmd_vel_topic" value="/fmSignals/cmd_vel" />
			<param name="max_linear_velocity" value="1.2"/>
			<param name="max_angular_velocity" value="1.2"/>
			<param name="deadband" value="5"/>
			<param name="reduced_range" value="40"/>
			<param name="feedback_topic" value="/fmHMI/joy/set_feedback" />
			<param name="joy_topic" value="/fmHMI/joy" />
			<param name="status_topic" value="/fmData/state"/>
			<param name="publish_frequency" value="10"/>
		</node>
	</group>
	
	<group ns="fmHMI">
		<node pkg="wiimote" type="wiimote_node.py" name="wiimote" respawn="true">
			<param name="fixed_wiimote_address" value="00:1F:32:B3:A2:F3"/>
		</node>		
	</group>

	<group ns="fmExecutors">
		<node pkg="sdu_kjen_sandbox" type="waypoint_navigation_node.py" name="navigate_waypoints" output="screen">
			<param name="automode_sub" value="/fmDecisionMakers/automode" />
			<param name="pose_sub" value="/fmKnowledge/pose_sim" />
			<param name="joy_sub" value="/joy" />
			<param name="cmd_vel_pub" value="/fmCommand/cmd_vel" />
			<param name="status_pub" value="/fmData/wptnav_status_sim" />
			<param name="status_publish_interval" value="1" />
			<param name="print_debug_information" value="true" />
		</node>		
	</group>

	<group ns="fmLib">
		<!-- launch conversion node to convert IntStamped messages to encoder messages -->
		<!-- (this is a temporary fix until we get all encoder messages changed to IntStamped) -->
		<node pkg="int_stamped_to_encoder" name="enc_conversion" type="pichi_encoder_converter.py">
			<param name="left_sub" value="/fmInformation/encoder_left" />
			<param name="right_sub" value="/fmInformation/encoder_right" />
			<param name="left_pub" value="/fmInformation/enc_left_sim" />
			<param name="right_pub" value="/fmInformation/enc_right_sim" />
		</node>
	</group>

	<group ns="rosbag">
		<!-- launch a bag from the robot to emulate sensor input -->
		<node pkg="rosbag" name="sensors" type="play" args="--start=0 --rate=1 --clock $(find sdu_kjen_sandbox)/waypoint_navigation/pichi_autonomous_test1.bag">
			<remap from="/rosbag/clock" to="/clock"/> <!-- should not be necessary but it is...!!! -->
		</node>
	</group>
</launch>
